//---------------------------------------------------------- Declaration -----------------------------------------------------
//---------------------------------------------------------- ----------- -----------------------------------------------------

#include "stm8s.h"
#include "milis.h"
#include "stdio.h"
#include "stm8_hd44780.h"
//#include "swspi.h"

//---------------------------------------------------------- Deklarace
//# define NAME constant;
//##### n-coder
#define CLK_PIN	GPIO_PIN_1
#define CLK_G		GPIOC
#define DT_PIN	GPIO_PIN_2
#define DT_G		GPIOC
#define SW_PIN	GPIO_PIN_3
#define SW_G		GPIOC

#define NCDR_CLK_GET 	( GPIO_ReadInputPin( CLK_G, CLK_PIN ) != RESET ) 	// 1 ... 5 V
#define NCDR_DT_GET 	( GPIO_ReadInputPin( DT_G, DT_PIN ) != RESET )		// 1 ... 5 V
#define NCDR_SW_GET		( GPIO_ReadInputPin( SW_G, SW_PIN ) == RESET )		// 1 ... stisk


//##### PWM
#define CHANGE_POSITION_TIME 50 // každých 50 ms změna
#define DEFAULT_PULSE 10

//##### sound
#define BEEP_PIN		GPIO_PIN_7
#define BEEP_PORT 	GPIOB

#define BEEP_ON			GPIO_WriteHigh(BEEP_PORT, BEEP_PIN)
#define BEEP_OFF		GPIO_WriteLow(BEEP_PORT, BEEP_PIN);

//---------------------------------------------------------- Funkce
// void function(void);
//##### inicializace
void init(void);
void init_pwm(void);

//##### hlavni
void interruption(void);

//##### servo
int8_t Encoder(void);
void process_pwm_change(void);

//##### UART
void uart_putchar(char data); 	// pošle jeden znak na UART
void uart_puts(char* retezec); 	// pošle celý řetězec a UART

//---------------------------------------------------------- proměnné
// type name = constant;
//##### servo
uint16_t periode = 1000 - 1;

//##### UART
char text[24];
uint16_t test = 0;

//##### LCD
uint16_t hodnota;

//---------------------------------------------------------- Main ------------------------------------------------------------
//---------------------------------------------------------- ---- ------------------------------------------------------------

void main(void){
	init();
	
	while(1){
		interruption();
	}
}


//---------------------------------------------------------- Funkce ----------------------------------------------------------
//---------------------------------------------------------- ------ ----------------------------------------------------------

//------------------------------------------ inicializace
void init(void){
	CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
	UART1_Init(115200,UART1_WORDLENGTH_8D,UART1_STOPBITS_1,UART1_PARITY_NO,UART1_SYNCMODE_CLOCK_DISABLE,UART1_MODE_TX_ENABLE);
	UART1_Cmd(ENABLE);
	
	init_milis();
	init_pwm();
	lcd_init();
	
	GPIO_Init( CLK_G, CLK_PIN, GPIO_MODE_IN_FL_NO_IT); 				// CLK
	GPIO_Init( DT_G, CLK_PIN, GPIO_MODE_IN_FL_NO_IT); 				// DT
	
	GPIO_Init(GPIOC, GPIO_PIN_5, GPIO_MODE_OUT_PP_LOW_SLOW); 			// led debug
	GPIO_Init(BEEP_PORT, BEEP_PIN, GPIO_MODE_OUT_PP_LOW_SLOW); 		// sound trigger
	
	TIM3_SetCompare2(100);
}


//------------------------------------------ main - interruption
void interruption(void){
	//### variables
	static uint16_t minule_uart = 0;
	static uint16_t minule_lcd = 0;
	static uint16_t minule_led = 0;
	static int8_t state = 0;
	uint8_t step = 50;
	
	//### show - uart
	if (milis() - minule_uart >= 500){
		sprintf(text,"t-high (us): %3u. \n\r", (periode + 1));
		uart_puts(text);
		sprintf(text,"t-low (us):  %3u. \n\n\r", (2000 - (periode + 1)));
		uart_puts(text);
		minule_uart = milis();
	}

	//### n-coder
	periode += step * Encoder();
	
	if (periode <= 499)
	{
		periode = 499;
	}
	else if (periode >= 1999)
	{
		periode = 1999;
	}
	
	if (periode == 499 || periode == 1999)
	{
		if (state == 0)
		{
			state = 1;
			BEEP_ON;
		}
	} 
	else 
	{
		if (state == 1)
		{
			state = 0;
			BEEP_OFF;
		}
	}
	
	
	//### servo
	TIM2_SetCompare1(periode);
	
	//### LCD
	if (milis() - minule_lcd >= 500){
		GPIO_WriteReverse(GPIOC,GPIO_PIN_5);
		
		sprintf(text,"High [us]: %5i", periode + 1);
		lcd_gotoxy(0,0);
		lcd_puts(text);
		
		sprintf(text,"Low [us]:  %5i", 2000 - (periode + 1));
		lcd_gotoxy(0,1);
		lcd_puts(text);
		
		//lcd_puts("anakonda");
		minule_lcd = milis();
	}
}



//------------------------------------------ uart

// pošle jeden znak na UART
void uart_putchar(char data){
 while(UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET);
 UART1_SendData8(data);
}

// pošle UARTem řetězec 
void uart_puts(char* retezec){ 
 while(*retezec){
  uart_putchar(*retezec);
  retezec++;
 }
}

//------------------------------------------ n-coder

int8_t Encoder(void){
	//	NCDR_CLK_GET	// 1 ... 5 V
	// 	NCDR_DT_GET		// 1 ... 5 V
	//	NCDR_SW_GET		// 1 ... push
	
	static uint8_t minule = 0;
	
	if (minule == 0 && NCDR_CLK_GET == 1) {
			// vzestupná hrana 
			minule = 1;
			if (NCDR_DT_GET == 0) {
					return -1;
			} else {
					return 1;
			}
	} 
	else if (minule == 1 && NCDR_CLK_GET == 0) {
			// sestupná hrana 
			minule = 0;
			if (NCDR_DT_GET == 0) {
					return 1;
			} else {
					return -1;
			}
	}
	return 0;
}


//------------------------------------------ PWM - init

void init_pwm(void){
	GPIO_Init(GPIOD, GPIO_PIN_4, GPIO_MODE_OUT_PP_LOW_FAST);	// servo
	GPIO_Init(GPIOD, GPIO_PIN_0, GPIO_MODE_OUT_PP_LOW_FAST);	// beeper

	TIM2_TimeBaseInit(TIM2_PRESCALER_16,20000-1);
	TIM3_TimeBaseInit(TIM2_PRESCALER_16,2000-1);

	TIM2_OC1Init( 					// inicializujeme kanál 1 (TM2_CH1)
		TIM2_OCMODE_PWM1, 				// režim PWM1
		TIM2_OUTPUTSTATE_ENABLE,	// Výstup povolen (TIMer ovládá pin)
		DEFAULT_PULSE,						// výchozí hodnota šířky pulzu je 1.5ms
		TIM2_OCPOLARITY_HIGH			// Zátěž rozsvěcíme hodnotou HIGH 
		);
		/*
	TIM2_OC2Init(
		TIM2_OCMODE_PWM1, 
		TIM2_OUTPUTSTATE_ENABLE,
		DEFAULT_PULSE,
		TIM2_OCPOLARITY_HIGH
	);*/
	TIM3_OC2Init(
		TIM2_OCMODE_PWM1,
		TIM2_OUTPUTSTATE_ENABLE,
		DEFAULT_PULSE,
		TIM2_OCPOLARITY_HIGH
		);
	
	TIM2_OC1PreloadConfig(ENABLE);
	//TIM2_OC2PreloadConfig(ENABLE);
	TIM3_OC2PreloadConfig(ENABLE);
	TIM2_Cmd(ENABLE);
	TIM3_Cmd(ENABLE);
}


// pod tímto komentářem nic neměňte 
#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */                                                
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */                               
  while (1)
  {
  }
}
#endif

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/